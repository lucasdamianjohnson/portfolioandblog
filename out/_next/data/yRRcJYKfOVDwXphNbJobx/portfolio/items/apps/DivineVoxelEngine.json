{"pageProps":{"data":{"title":"Divine Voxel Engine","description":"A voxel engine made with Baylon.Js and developed in TypeScript.","date":"2020-10-01","order":3,"tech":"babylonjs,ts","banner":" { \"src\" : \"/images/portfolio/libraries/DivineVoxelEngine/banner.jpg\", \"alt\":\"A 3d rendering of many cubes like Minecraft.\" } ","id":"DivineVoxelEngine"},"content":"\r\n#### About\r\n\r\nDivine Voxel Engine is an open-source voxel library written in TypeScript that I have been working on for a few years. Recently, I have used it to build games and release them either online or on Steam. I feel the engine will always be a work in progress, but I truly enjoy working on it due to the numerous challenges and optimization opportunities it presents. It has also been thrilling to push the boundaries of what most people think is possible with JavaScript, while also coming to understand the real limitations of JavaScript and finding ways to overcome them.\r\n\r\n####  Packages\r\n\r\n##### @divinevoxel/core\r\n\r\nThis is the core of the engine. It doesn't handle aspects like world generation. It's basic in the sense that it allows you to build what you want with it.\r\n\r\nFeatures:\r\n\r\n- Easy way to register voxels and textures.\r\n- Automatically syncs data between threads.\r\n- Minecraft-style sunlight and multi-colored voxel light.\r\n- Minecraft-style water flow.\r\n- Multi-threaded light and world updates.\r\n- Sets of tools for easy data access, voxel painting, chunk building, and chunk unloading.\r\n- Custom voxel shapes.\r\n- Overlayed and connected textures.\r\n- Shader effects for water and plants.\r\n- Custom voxel substances and rules.\r\n- Custom materials and shader overrides.\r\n- Custom voxel data tags, chunk data tags, column tags, and region data tags.\r\n- Voxel entities using thin instances.\r\n- Texture to 3D model conversion.\r\n\r\n##### @divinevoxel/iwg\r\n\r\nThis library handles infinite world generation. You just need to register the dimensions you want and the build function in the required threads. It will then build and load/unload the world around the player as they move.\r\n\r\n##### @divinevoxel/data\r\n\r\nThis is usually used with @divinevoxel/iwg as it handles the default implementation of storing chunks in the browser with IndexedDB and storing them on a Node server.\r\n\r\n##### @divinevoxel/ecs\r\n\r\nThis library handles entities and physics. It makes it easy to create entities that will interact and collide with the voxel world data.\r\n\r\n##### @divinevoxel/react\r\n\r\nThis is a simple library to make the Divine Voxel Engine easier to use with React.\r\n\r\n\r\n\r\n\r\n##### Technology Used\r\n\r\n- TypeScript\r\n- Babylon.JS\r\n\r\n\r\n\r\n#### Links\r\n\r\n[\r\n{\r\n\"link\" : \"https://github.com/Divine-Star-Software/DivineVoxelEngine\",\r\n\"center\": false,\r\n\"type\" : \"post\",\r\n\"size\" : \"medium\",\r\n\"text\" : \"View On GitHub\"\r\n}\r\n](button)\r\n\r\n#### Screenshots\r\n\r\n```RICHDATA\r\n{\r\n  \"type\": \"image-gallery\",\r\n  \"data\": {\r\n    \"gallery\": {\r\n      \"webP\" : true,\r\n      \"thumb\" : false,\r\n      \"popup\": false,\r\n      \"imageSize\": \"large\",\r\n      \"imageType\": \"post\"\r\n    },\r\n    \"images\": [\r\n      {\r\n        \"src\": \"/images/portfolio/libraries/DivineVoxelEngine/ScreenShots/1.jpg\"\r\n      },\r\n      {\r\n        \"src\": \"/images/portfolio/libraries/DivineVoxelEngine/ScreenShots/2.jpg\"\r\n      },\r\n      {\r\n        \"src\": \"/images/portfolio/libraries/DivineVoxelEngine/ScreenShots/3.jpg\"\r\n      },\r\n      {\r\n        \"src\": \"/images/portfolio/libraries/DivineVoxelEngine/ScreenShots/4.jpg\"\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\n#### Video\r\n\r\n[YT](https://www.youtube.com/embed/k7TK3jYp5vI?si=2IlEBUlamqsq2gio)\r\n\r\n[YT](https://www.youtube.com/embed/5PlEITrrg6o?si=CzWpvyNaQeLIlWW)\r\n\r\n[YT](https://www.youtube.com/embed/m2W35kXR5L4?si=YsXw-pVDeGwug7RX)\r\n","id":"DivineVoxelEngine"},"__N_SSG":true}