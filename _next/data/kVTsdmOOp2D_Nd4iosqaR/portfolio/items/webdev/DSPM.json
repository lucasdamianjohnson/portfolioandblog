{"pageProps":{"data":{"title":"DSPM","description":"A project management full-stack app.","date":"2020-10-01","order":1,"tech":"react,node,express,mongodb,redis","banner":" { \"src\" : \"/images/portfolio/DSPM/banner.jpg\", \"alt\":\"Divine Star Project Manager bugs screen screen shot.\" } ","id":"DSPM"},"content":"\r\n### Divine Star Project Manager\r\n\r\n#### Table Of Contents\r\n\r\n- [About](#About)\r\n- [Development](#Development)\r\n- [Design](#Design)\r\n- [Notes](#Notes)\r\n- [Links](#Links)\r\n- [Screenshots](#Screenshots)\r\n\r\n#### About \r\n\r\nDSPM aka Divine Star Project Manager is a project management web software. It's a single page application built with a MERN stack. It can be either used as a stand alone application or you can use it's API. It is meant to be an application that is deployed by the user on their own server akin to something like GitLab. \r\n\r\nThe goal of DSPM is to create an enjoyable and easy to use project management software for individuals, organizations, as well as their clients. The word I use to specifically describe the experience that I wish to create with this project is 'zen'. Meaning I intended to create an incredibly simple but powerful experience. \r\n\r\nOne of the coolest features I feel is being able to add notes, comments, and content to projects. tasks, and bugs using Markdown. \r\n\r\n##### Current Features\r\n\r\n- Secure sign in and authorization with JWT tokens.\r\n  - To be truly secure the instance of DSPM must be on server with a valid SSL certificate. \r\n- Create different project categories. Both private and public. \r\n- Create projects for each category. \r\n  - Each project has it's own Task and Bug categories. \r\n  - Each project has a comments and note section as well as a content section.\r\n- Create tasks for each project.\r\n  - Tasks can be either simple to-dos, features, and or development goals.  \r\n  - Each task has a comments and note section as well as a content section.\r\n- Create bugs for each project. \r\n  - Bugs are the un-intended problems that arise in a project. \r\n  - They are handled separately so you can restrict who can see them. \r\n  - Each bug has a comments and note section as well as a content section.\r\n- Create content and write comments using markdown. \r\n- Caching server side using Redis and local caching using IndexDB. \r\n- An API that can be used to access all data from the server. Thus allowing a headless mode if need be. \r\n\r\nThis project is still in development. But is close to an official release. Here are some features that are to be added.\r\n\r\n##### Features In Development\r\n\r\n- Assign users to projects, tasks, and bugs. \r\n- Upload file attachments to comments and notes. \r\n- Invite users to join through a generated link that expires.\r\n- Build in email support through something like courier.\r\n- Add Auth0 support. \r\n\r\nFeatures that I really want to implement but will be done later.\r\n\r\n##### Desired Features \r\n\r\n- Add tags for projects, bugs, and tasks. \r\n\r\n  - There would be global levels tags and project level tags. \r\n  - Separate tag groups for each that could be used to query all related content. \r\n\r\n- Add a notebook section separate from the projects section just for notes.\r\n\r\n  - Could have private and public notes. Such as shared documentation for a company.\r\n\r\n- Create an easy way to export all the content. \r\n\r\n\r\n#### Development\r\n\r\n##### Full List Of Technology Used\r\n\r\n- MongoDB \r\n  - Used for all data storage. \r\n  - The creator of the instance of DSPM must provide a valid connection URL string.\r\n- Redis\r\n  - Used for caching data on the server side.\r\n  - The creator of the instance of DSPM must provide a valid connection URL string.\r\n- IndexDB\r\n  - Used for client side caching of API responses. \r\n- NodeJS\r\n  - Used to create the backend of the application. \r\n- Express\r\n  - Used to create the API for the application.\r\n  - Also various middleware from express is used. To do things such as create cookies and parse JSON response bodies.\r\n- TypeScript\r\n  - Used to write all of the code. \r\n- React\r\n  - Used to create the UI for the main application. \r\n- Material UI\r\n  - The component library that is used.\r\n\r\n#### Design\r\n\r\nThe overall design of the codebase for this project follows the Model View Controller programming pattern. Data is stored in a database, data is accessed and worked upon on the server, and the representation of the data is presented on through the front end. The single place of truth is always the database. \r\n\r\n**Caching**\r\n\r\nCaching is a big part of the overall design of this program. All needed responses from the server are stored in IndexDB on the client side. Only when something needed to be refreshed a new data is retrieved and cached. This is to keep the load times on the client side really fast for all ready loaded content as well to reduce the load on the server. \r\n\r\n##### Back End\r\n\r\nThe backend API is designed to be a RESTful based API. Meaning all the responses and request are uniform, stateless, and can be cached easily. \r\n\r\nThe API itself is written with mostly a functional pattern with the use of some class objects that are passed to the functions. Each end point is it's own function that can be individually worked on. Upon each API request a JWT token must be provided either through a cookie or through the API call itself. If the JWT token is valid and has the needed information the server will begin to process the request.  Before each request is processed it's request body is checked to make sure that it's structure and variables types match the expected values. Once that is all good the request is finally executed. If caching is enabled on the server the response will be cached if need be and then the response will be sent. \r\n\r\nI think I did do one thing unique with this API and that is by providing a means to add more operations to a single call to limit actual request to the server. For instance if a add or update a project and you set a special flag in the request it will return the success message as well the new list of projects to be displayed. So a second request to the server does not need to be made and the cache on the server side is automatically updated. \r\n\r\n##### Front End\r\n\r\nI went with Material UI as the base for the design of the application. \r\n\r\nSome of my design principals for the project are:\r\n\r\n- Keep the UI as decluttered as possible. \r\n- Make everything easy to find.\r\n- Separate operations into different screens. \r\n- No sudden cuts to a different screen. All must be smooth transition.\r\n- Keep the colors and backgrounds a \"relaxing\" color that is easy on eye strain. \r\n\r\n\r\n\r\n#### Notes\r\n\r\n**Some Additional Notes**\r\n\r\nThe config for the application is all stored in the local .env file. When the  program is first started it will check to see if it is properly configured. \r\n\r\nIf it is not it will prompt the user to go through a configuration process. There they can set up the database and create the first initial admin user. \r\n\r\nThe config and the end points for it will only be created if it can not establish a connection to a MongoDB instance and if when it connects to the MongoDB instance it does not find any admin users. \r\n\r\n\r\n\r\n#### Links\r\n\r\n[\r\n    {\r\n        \"link\" : \"https://github.com/Divine-Star-Software/DivineStarProjectManager\",\r\n        \"center\": false,\r\n        \"type\" : \"post\",\r\n        \"size\" : \"medium\",\r\n        \"text\" : \"View On GitHub\"\r\n    }\r\n](button)\r\n\r\n\r\n#### Screenshots \r\n\r\n```RICHDATA\r\n{\r\n  \"type\": \"image-gallery\",\r\n  \"data\": {\r\n    \"gallery\": {\r\n      \"webP\" : true,\r\n      \"thumb\" : false,\r\n      \"popup\": false,\r\n      \"imageSize\": \"large\",\r\n      \"imageType\": \"post\"\r\n    },\r\n    \"images\": [\r\n      {\r\n        \"src\": \"/images/portfolio/DSPM/sign-in-page.jpg\"\r\n      },\r\n      {\r\n        \"src\": \"/images/portfolio/DSPM/project-cateogry-page.jpg\"\r\n      },\r\n      {\r\n        \"src\": \"/images/portfolio/DSPM/projects-page.jpg\"\r\n      },\r\n      {\r\n        \"src\": \"/images/portfolio/DSPM/tasks-page.jpg\"\r\n      },\r\n      {\r\n        \"src\": \"/images/portfolio/DSPM/bugs-page.jpg\"\r\n      },\r\n      {\r\n        \"src\": \"/images/portfolio/DSPM/notes-page.jpg\"\r\n      },\r\n      {\r\n        \"src\": \"/images/portfolio/DSPM/comments-page.jpg\"\r\n      },\r\n      {\r\n        \"src\": \"/images/portfolio/DSPM/add-update-page.jpg\"\r\n      },\r\n      {\r\n        \"src\": \"/images/portfolio/DSPM/edit-content-page.jpg\"\r\n      },\r\n      {\r\n        \"src\": \"/images/portfolio/DSPM/view-content-page.jpg\"\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n","id":"DSPM"},"__N_SSG":true}