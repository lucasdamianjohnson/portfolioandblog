(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[634],{22327:function(e,t,s){Promise.resolve().then(s.bind(s,81523)),Promise.resolve().then(s.bind(s,70049)),Promise.resolve().then(s.bind(s,16602)),Promise.resolve().then(s.t.bind(s,4738,23)),Promise.resolve().then(s.t.bind(s,20123,23))},16602:function(e,t,s){"use strict";s.r(t),s.d(t,{default:function(){return b}});var i=s(57437),r=s(2265),o=s(79290),n=s(26233),a=s(84493),l=s(86),d=s(55754),h=s(83542),m=s(55281),c=s(80130),p=s(7610),u=s(77606),g=s(84270);class w{setSeed(e){this.z=this.seed=(null==e?Math.random()*this.m:e)>>>0}getSeed(){return this.seed}rand(){return this.z=(this.a*this.z+this.c)%this.m,this.z/this.m}constructor(e){this.seed=e,this.m=4294967296,this.a=1664525,this.c=1013904223,this.z=0,this.setSeed(e)}}var f=s(33748);console.warn(n,a.e);class v extends o.MeshStandardMaterial{get time(){return this._uniforms.iTime.value}set time(e){this._uniforms.iTime.value=e}constructor(e){super({side:o.DoubleSide,...e}),this._uniforms={iTime:{value:0}},this.customProgramCacheKey=()=>crypto.randomUUID(),this.onBeforeCompile=(e,t)=>{e.uniforms.iTime=this._uniforms.iTime,e.defines.USE_UV="",e.defines.USE_COLOR="",e.vertexShader=e.vertexShader.replace("void main() {","\n        uniform float iTime;\n        void main() {"),e.vertexShader=e.vertexShader.replace("#include <morphtarget_vertex>","#include <morphtarget_vertex>\n        float waveSize = 10.0;\n        float tipDistance = 0.3;\n        float centerDistance = 0.1;\n        if (color.x > 0.6) {\n            transformed.x += sin((iTime) + (uv.x * waveSize)) * tipDistance;\n        }else if (color.x > 0.0) {\n            transformed.x += sin((iTime) + (uv.x * waveSize)) * centerDistance;\n        }\n        ")}}}class x{dispose(){this.mesh&&(this.scene.remove(this.mesh),this.mesh.geometry.dispose())}constructor({worker:e,bladeCount:t,bladeWidth:s,bladeHeight:i,grassTexture:r,noiseScale:n,noiseAmplitude:a,chunkX:l,chunkZ:d,gridSize:h,scene:m}){this.mesh=null,this.bladeCount=t,this.scene=m,x.mat.map=r,this.bladeWidth=s,this.bladeHeight=i;let c=crypto.randomUUID(),p=t=>{let{data:s}=t;if("set-grass"==s[0]&&s[1]==c){e.removeEventListener("message",p);let{positions:t,uvs:i,colors:r,indices:n,normal:a}=s[2],l=new o.BufferGeometry;l.setAttribute("position",new o.BufferAttribute(t,3)),l.setAttribute("uv",new o.BufferAttribute(i,2)),l.setAttribute("color",new o.BufferAttribute(r,3)),l.setAttribute("normal",new o.BufferAttribute(a,3)),l.setIndex(new o.BufferAttribute(n,1)),this.mesh=new o.Mesh(l,x.mat),this.mesh.castShadow=!0,this.mesh.receiveShadow=!0,this.scene.add(this.mesh)}};e.addEventListener("message",p),e.postMessage(["make-grass",c,l,d,h,n,a,s,i])}}x.mat=new v({});let S=new o.Object3D;class M{static async loadTrees(){let e=new u.E,t=M.treePaths.map(async t=>{try{let s=await e.loadAsync(t);s.scene.traverse(e=>{e instanceof o.Mesh&&(e.material&&(e.material.side=o.FrontSide),e.geometry.scale(.2,.2,.2),e.scale.set(1,1,1))});let i=s.scene.children[0];M.loadedTrees.push(i)}catch(e){console.error("Error loading tree model from path: ".concat(t),e)}});await Promise.all(t),console.log("All trees loaded and scaled successfully.")}placeTrees(e,t,s){let i=this.gridSize/2,r=[],n=0;for(let i=this.chunkZ*this.gridSize;i>this.chunkZ*this.gridSize-this.gridSize;i-=10){let o=3*Math.random()*(Math.random()>.5?-1:1);r.push(-50+o,e((-50+o)*t,i*t,0)*s-.1,i),r.push(-60+o,e((-60+o)*t,(i+5)*t,0)*s-.1,i+5),n++,r.push(50+o,e((50+o)*t,(i+5)*t,0)*s-.1,i+5),r.push(60+o,e((60+o)*t,(i+5)*t,0)*s-.1,i+5),n++}for(let o=0;o<100;o++){let o=30*Math.random()*(Math.random()>.5?-1:1),n=this.chunkZ*this.gridSize+Math.random()*this.gridSize-i,a=e(o*t,n*t,0)*s;a<0||r.push(o,a,n)}let a=Math.ceil(r.length/M.treePaths.length);if(M.instaces.length)for(let e of(this.trees=M.instaces.shift(),this.trees))e.instanceMatrix.needsUpdate=!0;else this.trees=M.loadedTrees.map(e=>{let t=new o.InstancedMesh(e.geometry,e.material,a);return t.frustumCulled=!1,t.matrixAutoUpdate=!0,t.castShadow=!0,t.receiveShadow=!0,this.scene.add(t),this.trees.push(t),t});let l=new Map;for(let e=0;e<r.length;e+=3){let t=r[e],s=r[e+1],i=r[e+2];S.position.set(t,s,i),S.rotation.y=Math.random()*Math.PI,S.updateMatrix();let o=this.trees[Math.floor(this.trees.length*Math.random())],n=l.get(o)||0;l.set(o,n+1),o.setMatrixAt(n,S.matrix)}for(let e of this.trees)e.instanceMatrix.needsUpdate=!0}dispose(){M.instaces.push(this.trees)}constructor({noiseScale:e,noiseAmplitude:t,noiseFunction:s,chunkX:i,chunkZ:r,gridSize:o,scene:n}){this.trees=[],this.scene=n,this.chunkX=i,this.chunkZ=r,this.gridSize=o,M.loadedTrees.length>0&&this.placeTrees(s,e,t)}}M.treePaths=["/assets/InfiniteForest/trees/1.gltf","/assets/InfiniteForest/trees/2.gltf","/assets/InfiniteForest/trees/3.gltf","/assets/InfiniteForest/trees/4.gltf","/assets/InfiniteForest/trees/5.gltf"],M.loadedTrees=[],M.instaces=[];var b=()=>{let e=(0,r.useRef)(null);return(0,r.useEffect)(()=>{let t=new Worker(s.tu(new URL(s.p+s.u(1693),s.b))),i=new o.Scene,r=new o.PerspectiveCamera(40,window.innerWidth/window.innerHeight,.01,1e3);r.position.set(0,3,-300),r.rotation.x=-.02;let n=new o.WebGLRenderer({canvas:e.current,antialias:!0});n.setSize(window.innerWidth,window.innerHeight),n.setPixelRatio(Math.max(1,window.devicePixelRatio/2)),n.setClearColor(0,1),n.shadowMap.enabled=!0,n.shadowMap.autoUpdate=!0,n.shadowMap.type=o.PCFSoftShadowMap;let a=new g.m(r,n.domElement);a.movementSpeed=200,a.rollSpeed=Math.PI/24,a.dragToLook=!0;let u=new l.x(n);u.addPass(new d.C(i,r));let v=new h.m(new o.Vector2(window.innerWidth,window.innerHeight),1.25,.4,.98);u.addPass(v);let S=new m.t(0,.025,648,!1);u.addPass(S);let b=new f.A(i,r,{focus:100,aperture:25e-6,maxblur:.1});u.addPass(b);let C=new o.AmbientLight(16777215,1);i.add(C);let y=new o.DirectionalLight(16777215,6);i.add(y.target),y.castShadow=!0,y.shadow.bias=.01,y.shadow.bias=-.0001,y.shadow.normalBias=.05,y.shadow.mapSize.width=2048,y.shadow.mapSize.height=2048,y.shadow.camera.near=.5,y.shadow.camera.far=500,r.aspect,y.shadow.camera.left=-300,y.shadow.camera.right=300,y.shadow.camera.top=300,y.shadow.camera.bottom=-300,y.shadow.camera.updateProjectionMatrix(),i.add(y);let z=new o.CameraHelper(y.shadow.camera);i.add(z);let P=new o.CubeTextureLoader().load(["/assets/InfiniteForest/px.jpg","/assets/InfiniteForest/nx.jpg","/assets/InfiniteForest/py.jpg","/assets/InfiniteForest/ny.jpg","/assets/InfiniteForest/pz.jpg","/assets/InfiniteForest/nz.jpg"]);i.background=P;let T={uniforms:{topColor:{value:new o.Color(7566716)},bottomColor:{value:new o.Color(16777215)},heightCutoff:{value:200}},vertexShader:"\n        varying vec3 vWorldPosition;\n        void main() {\n          vec4 worldPosition = modelMatrix * vec4(position, 1.0);\n          vWorldPosition = worldPosition.xyz;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        }\n      ",fragmentShader:"\n        uniform vec3 topColor;\n        uniform vec3 bottomColor;\n        uniform float heightCutoff;\n        varying vec3 vWorldPosition;\n    \n        void main() {\n          float heightFactor = smoothstep(0.0, heightCutoff, vWorldPosition.y);\n          gl_FragColor = vec4(mix(bottomColor, topColor, heightFactor), 1.0);\n        }\n      ",side:o.BackSide},F=new o.ShaderMaterial(T),I=new o.BoxGeometry(800,5e3,800),A=new o.Mesh(I,F);A.position.z=-600,i.add(A);let E=new o.TextureLoader,_=E.load("/assets/InfiniteForest/dirt.png"),k=E.load("/assets/InfiniteForest/grass.png"),H=E.load("/assets/InfiniteForest/grass.png"),U=E.load("/assets/InfiniteForest/water.jpg",e=>{e.wrapS=e.wrapT=o.RepeatWrapping});_.wrapS=_.wrapT=o.RepeatWrapping,k.wrapS=k.wrapT=o.RepeatWrapping,n.toneMapping=o.ACESFilmicToneMapping;let W=new o.MeshStandardMaterial({map:_});W.onBeforeCompile=e=>{e.uniforms.grassTexture={value:k},e.uniforms.lowerHeight={value:-5},e.uniforms.upperHeight={value:0},e.vertexShader=e.vertexShader.replace("#include <common>","#include <common>\n          varying float vHeight;\n          varying vec2 vUv;\n        "),e.vertexShader=e.vertexShader.replace("#include <begin_vertex>","#include <begin_vertex>\n          vUv = uv;\n          vHeight = position.z;\n        "),e.fragmentShader=e.fragmentShader.replace("#include <common>","#include <common>\n          uniform sampler2D grassTexture;\n          uniform float lowerHeight;\n          uniform float upperHeight;\n          varying float vHeight;\n          varying vec2 vUv;\n        "),e.fragmentShader=e.fragmentShader.replace("#include <map_fragment>","\n          // Normalize the height for blending\n          float t = smoothstep(lowerHeight, upperHeight, vHeight);\n          \n          // Sample both textures\n          vec4 dirtColor = texture2D(map, vUv * 10.0); // Dirt texture\n          vec4 grassColor = texture2D(grassTexture, vUv * 10.0); // Grass texture\n          \n    // Convert sampled colors to linear space\ndirtColor.rgb = pow(dirtColor.rgb, vec3(2.2)); // sRGB to linear for dirt texture\ngrassColor.rgb = pow(grassColor.rgb * .8, vec3(2.2)); // sRGB to linear for grass texture\n\n// Blend textures based on height\nvec4 finalColor = mix(dirtColor, grassColor, t);\n\n// Convert final color back to sRGB before setting it\nfinalColor.rgb = pow(finalColor.rgb, vec3(1.0 / 2.2));\n\n// Set the final color\ndiffuseColor = finalColor;\n        ")};let B=new o.Color(16777215);i.fog=new o.Fog(B,.00105);let D=Math.random()*Number.MAX_SAFE_INTEGER>>0,R=new w(D),j=(0,p.zz)(()=>R.rand());t.postMessage(["set-seed",D]);let L=(e,t)=>"".concat(e,"_").concat(t),G=new Map,N=(e,s)=>{let r=new o.PlaneGeometry(300,300,50,50),n=new o.Mesh(r,W);n.receiveShadow=!0,n.castShadow=!1;let a=n.geometry.attributes.position;for(let t=0;t<a.count;t++){let i=2*j((a.getX(t)+300*e)*.02,(0-a.getY(t)+300*s)*.02,0);a.setZ(t,i)}n.rotation.x=-Math.PI/2,n.position.x=300*e,n.position.z=300*s,a.needsUpdate=!0,n.geometry.computeVertexNormals(),i.add(n);let l=new o.PlaneGeometry(300,300),d=new c.B(l,{textureWidth:window.innerWidth*window.devicePixelRatio,textureHeight:window.innerHeight*window.devicePixelRatio,waterNormals:U,sunDirection:y.position.clone().normalize(),sunColor:16777215,waterColor:16777215,distortionScale:10,fog:void 0!==i.fog,time:1});d.receiveShadow=!0,d.rotation.x=-Math.PI/2,d.position.x=300*e,d.position.z=300*s,d.position.y=.1,i.add(d);let h=new x({worker:t,bladeCount:24e3,bladeWidth:.4,bladeHeight:.6,noiseScale:.02,noiseAmplitude:2,scene:i,grassTexture:H,chunkX:e,chunkZ:s,gridSize:300});return{mesh:n,waterMesh:d,trees:new M({noiseScale:.02,noiseAmplitude:2,noiseFunction:j,scene:i,chunkX:e,chunkZ:s,gridSize:300}),grass:h,x:e,z:s}},O=()=>{let e=Math.floor(r.position.x/300),t=Math.floor(r.position.z/300);for(let s=t;s>t-2;s--){let t=L(e,s);if(!G.has(t)){console.warn("gen key",t);let i=N(e,s);G.set(t,i)}}G.forEach((s,r)=>{(s.x<e-2||s.x>e+2||s.z<t-4||s.z>t+2)&&(i.remove(s.mesh),s.mesh.geometry.dispose(),s.waterMesh&&(i.remove(s.waterMesh),s.waterMesh.geometry.dispose()),s.grass.dispose(),s.trees.dispose(),G.delete(r))})};(async()=>{await M.loadTrees(),O();let e=new o.Vector3(100,200,100),t=new o.Clock,s=()=>{requestAnimationFrame(s);let i=t.getDelta();t.getElapsedTime(),x.mat.time+=.1,G.forEach(e=>{e.waterMesh.material.uniforms.time.value+=.01}),A.position.z-=25*i,r.position.z-=25*i,y.target.position.set(r.position.x,0,r.position.z),y.position.copy(y.target.position).add(e),O(),u.render()};s()})();let V=()=>{let e=window.innerWidth,t=window.innerHeight;r.aspect=e/t,r.updateProjectionMatrix(),n.setSize(e,t)};return window.addEventListener("resize",V),()=>{window.removeEventListener("resize",V),n.dispose(),G.forEach(e=>{i.remove(e.mesh),e.mesh.geometry.dispose(),e.mesh.material.dispose(),e.waterMesh&&(i.remove(e.waterMesh),e.waterMesh.geometry.dispose(),e.waterMesh.material.dispose()),i.remove(e.grass.mesh),e.grass.dispose()}),G.clear(),i.traverse(e=>{if(e.geometry&&e.geometry.dispose(),e.material){let t=e.material;Array.isArray(t)?t.forEach(e=>e.dispose()):t.dispose()}})}},[]),(0,i.jsx)("canvas",{ref:e,style:{width:"100%",height:"100%",display:"block"}})}},4738:function(){},20123:function(){}},function(e){e.O(0,[8685,5889,225,6762,7122,3590,2025,813,154,536,3224,9154,944,6233,2971,2117,1744],function(){return e(e.s=22327)}),_N_E=e.O()}]);