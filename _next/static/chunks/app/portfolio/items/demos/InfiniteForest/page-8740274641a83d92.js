(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[634],{22327:function(e,t,s){Promise.resolve().then(s.bind(s,81523)),Promise.resolve().then(s.bind(s,70049)),Promise.resolve().then(s.bind(s,16602)),Promise.resolve().then(s.t.bind(s,4738,23)),Promise.resolve().then(s.t.bind(s,20123,23))},16602:function(e,t,s){"use strict";s.r(t),s.d(t,{default:function(){return S}});var i=s(57437),r=s(2265),o=s(79290),a=s(26233),n=s(84493),d=s(86),l=s(55754),h=s(83542),m=s(55281),c=s(80130),p=s(7610),w=s(77606),g=s(84270);class u{setSeed(e){this.z=this.seed=(null==e?Math.random()*this.m:e)>>>0}getSeed(){return this.seed}rand(){return this.z=(this.a*this.z+this.c)%this.m,this.z/this.m}constructor(e){this.seed=e,this.m=4294967296,this.a=1664525,this.c=1013904223,this.z=0,this.setSeed(e)}}var f=s(33748);console.warn(a,n.e);class v{dispose(){this.mesh&&(this.scene.remove(this.mesh),this.mesh.geometry.dispose(),this.grassMaterial.dispose())}constructor({worker:e,bladeCount:t,bladeWidth:s,bladeHeight:i,grassTexture:r,noiseScale:a,noiseAmplitude:n,chunkX:d,chunkZ:l,gridSize:h,scene:m}){this.mesh=null,this.bladeCount=t,this.scene=m,this.bladeWidth=s,this.bladeHeight=i,this.grassMaterial=new o.MeshStandardMaterial({map:r,side:o.DoubleSide});let c=crypto.randomUUID(),p=t=>{let{data:s}=t;if("set-grass"==s[0]&&s[1]==c){e.removeEventListener("message",p);let{positions:t,uvs:i,colors:r,indices:a}=s[2],n=new o.BufferGeometry;n.setAttribute("position",new o.BufferAttribute(t,3)),n.setAttribute("uv",new o.BufferAttribute(i,2)),n.setAttribute("color",new o.BufferAttribute(r,3)),n.setIndex(new o.BufferAttribute(a,1)),n.computeVertexNormals(),this.mesh=new o.Mesh(n,this.grassMaterial),this.mesh.castShadow=!0,this.mesh.receiveShadow=!0,this.scene.add(this.mesh)}};e.addEventListener("message",p),e.postMessage(["make-grass",c,d,l,h,a,n,s,i])}}class x{static async loadTrees(){let e=new w.E,t=x.treePaths.map(t=>e.loadAsync(t).then(e=>{e.scene.traverse(e=>{e.material&&(e.material.side=o.FrontSide)});let t=e.scene.children[0];x.loadedTrees.push(t)}));await Promise.all(t)}placeTrees(e,t,s){let i=this.gridSize/2,r=0;for(let a of x.loadedTrees){if(r>40)break;let n=new o.InstancedMesh(a.geometry,a.material,10);n.castShadow=!0,n.receiveShadow=!0;let d=0;for(let a=this.chunkZ*this.gridSize;a<this.chunkZ*this.gridSize+this.gridSize;a+=this.gridSize/40)!(Math.random()>.8)&&(r++,n.setMatrixAt(0,new o.Matrix4().makeTranslation(-i/2,e(this.chunkX*this.gridSize*t,a*t,0)*s-1,a)),d++,n.setMatrixAt(0,new o.Matrix4().makeTranslation(i/2,e((this.chunkX*this.gridSize+this.gridSize)*t,a*t,0)*s-1,a)),d++);this.scene.add(n),this.trees.push(n)}for(let r of x.loadedTrees){let a=new o.InstancedMesh(r.geometry,r.material,10);a.castShadow=!0,a.receiveShadow=!0;for(let r=0;r<10;r++){let n=i/2*Math.random()*(Math.random()>.5?-1:1),d=this.chunkZ*this.gridSize+Math.random()*this.gridSize-i,l=e(n*t,d*t,0)*s;if(l<3)continue;let h=new o.Matrix4().makeTranslation(n,l-1,d);a.setMatrixAt(r,h)}this.scene.add(a),this.trees.push(a)}}dispose(){for(let e of this.trees)this.scene.remove(e),e.dispose();this.trees=[]}constructor({noiseScale:e,noiseAmplitude:t,noiseFunction:s,chunkX:i,chunkZ:r,gridSize:o,scene:a}){this.trees=[],this.scene=a,this.chunkX=i,this.chunkZ=r,this.gridSize=o,x.loadedTrees.length>0&&this.placeTrees(s,e,t)}}x.treePaths=["/assets/InfiniteForest/trees/1.gltf","/assets/InfiniteForest/trees/2.gltf","/assets/InfiniteForest/trees/3.gltf","/assets/InfiniteForest/trees/4.gltf","/assets/InfiniteForest/trees/5.gltf"],x.loadedTrees=[];var S=()=>{let e=(0,r.useRef)(null);return(0,r.useEffect)(()=>{let t=new Worker(s.tu(new URL(s.p+s.u(1693),s.b))),i=new o.Scene,r=new o.PerspectiveCamera(30,window.innerWidth/window.innerHeight,.01,1e3);r.position.set(0,11,-300),r.rotation.x=-.02;let a=new o.WebGLRenderer({canvas:e.current,antialias:!0});a.setSize(window.innerWidth,window.innerHeight),a.setPixelRatio(Math.max(1,window.devicePixelRatio/2)),a.setClearColor(0,1),a.shadowMap.enabled=!0,a.shadowMap.autoUpdate=!0,a.shadowMap.type=o.PCFSoftShadowMap;let n=new g.m(r,a.domElement);n.movementSpeed=200,n.rollSpeed=Math.PI/24,n.dragToLook=!0;let w=new d.x(a);w.addPass(new l.C(i,r));let S=new h.m(new o.Vector2(window.innerWidth,window.innerHeight),1.25,.4,.98);w.addPass(S);let M=new m.t(0,.025,648,!1);w.addPass(M);let b=new f.A(i,r,{focus:100,aperture:25e-6,maxblur:.1});w.addPass(b);let C=new o.AmbientLight(16777215,.4);i.add(C);let z=new o.DirectionalLight(16777215,4);i.add(z.target),z.castShadow=!0,z.shadow.bias=.01,z.shadow.bias=-.0001,z.shadow.normalBias=.05,z.shadow.mapSize.width=4096,z.shadow.mapSize.height=4096,z.shadow.camera.near=.5,z.shadow.camera.far=500;let y=r.aspect;z.shadow.camera.left=-500*y,z.shadow.camera.right=500*y,z.shadow.camera.top=500,z.shadow.camera.bottom=-500,z.shadow.camera.updateProjectionMatrix(),i.add(z);let P=new o.CameraHelper(z.shadow.camera);i.add(P);let F=new o.CubeTextureLoader().load(["/assets/InfiniteForest/px.jpg","/assets/InfiniteForest/nx.jpg","/assets/InfiniteForest/py.jpg","/assets/InfiniteForest/ny.jpg","/assets/InfiniteForest/pz.jpg","/assets/InfiniteForest/nz.jpg"]);i.background=F;let T={uniforms:{topColor:{value:new o.Color(7566716)},bottomColor:{value:new o.Color(16777215)},heightCutoff:{value:200}},vertexShader:"\n        varying vec3 vWorldPosition;\n        void main() {\n          vec4 worldPosition = modelMatrix * vec4(position, 1.0);\n          vWorldPosition = worldPosition.xyz;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        }\n      ",fragmentShader:"\n        uniform vec3 topColor;\n        uniform vec3 bottomColor;\n        uniform float heightCutoff;\n        varying vec3 vWorldPosition;\n    \n        void main() {\n          float heightFactor = smoothstep(0.0, heightCutoff, vWorldPosition.y);\n          gl_FragColor = vec4(mix(bottomColor, topColor, heightFactor), 1.0);\n        }\n      ",side:o.BackSide},k=new o.ShaderMaterial(T),I=new o.BoxGeometry(800,5e3,800),A=new o.Mesh(I,k);A.position.z=-600,i.add(A);let E=new o.TextureLoader,H=E.load("/assets/InfiniteForest/dirt.png"),W=E.load("/assets/InfiniteForest/grass.png"),B=E.load("/assets/InfiniteForest/grass.png");H.wrapS=H.wrapT=o.RepeatWrapping,W.wrapS=W.wrapT=o.RepeatWrapping,a.toneMapping=o.ACESFilmicToneMapping;let R=new o.MeshStandardMaterial({map:H});R.onBeforeCompile=e=>{e.uniforms.grassTexture={value:W},e.uniforms.lowerHeight={value:-5},e.uniforms.upperHeight={value:0},e.vertexShader=e.vertexShader.replace("#include <common>","#include <common>\n          varying float vHeight;\n          varying vec2 vUv;\n        "),e.vertexShader=e.vertexShader.replace("#include <begin_vertex>","#include <begin_vertex>\n          vUv = uv;\n          vHeight = position.z;\n        "),e.fragmentShader=e.fragmentShader.replace("#include <common>","#include <common>\n          uniform sampler2D grassTexture;\n          uniform float lowerHeight;\n          uniform float upperHeight;\n          varying float vHeight;\n          varying vec2 vUv;\n        "),e.fragmentShader=e.fragmentShader.replace("#include <map_fragment>","\n          // Normalize the height for blending\n          float t = smoothstep(lowerHeight, upperHeight, vHeight);\n          \n          // Sample both textures\n          vec4 dirtColor = texture2D(map, vUv * 10.0); // Dirt texture\n          vec4 grassColor = texture2D(grassTexture, vUv * 10.0); // Grass texture\n          \n    // Convert sampled colors to linear space\ndirtColor.rgb = pow(dirtColor.rgb, vec3(2.2)); // sRGB to linear for dirt texture\ngrassColor.rgb = pow(grassColor.rgb, vec3(2.2)); // sRGB to linear for grass texture\n\n// Blend textures based on height\nvec4 finalColor = mix(dirtColor, grassColor, t);\n\n// Convert final color back to sRGB before setting it\nfinalColor.rgb = pow(finalColor.rgb, vec3(1.0 / 2.2));\n\n// Set the final color\ndiffuseColor = finalColor;\n        ")};let _=new o.Color(16777215);i.fog=new o.Fog(_,.00105);let j=Math.random()*Number.MAX_SAFE_INTEGER>>0,L=new u(j),G=(0,p.zz)(()=>L.rand());t.postMessage(["set-seed",j]);let U=(e,t)=>"".concat(e,"_").concat(t),D=new Map,N=(e,s)=>{let r=new o.PlaneGeometry(300,300,50,50),a=new o.Mesh(r,R);a.receiveShadow=!0,a.castShadow=!1;let n=a.geometry.attributes.position;for(let t=0;t<n.count;t++){let i=10*G((n.getX(t)+300*e)*.015,(0-n.getY(t)+300*s)*.015,0);n.setZ(t,i)}a.rotation.x=-Math.PI/2,a.position.x=300*e,a.position.z=300*s,n.needsUpdate=!0,a.geometry.computeVertexNormals(),i.add(a);let d=new o.PlaneGeometry(300,300),l=new c.B(d,{textureWidth:window.innerWidth*window.devicePixelRatio,textureHeight:window.innerHeight*window.devicePixelRatio,waterNormals:E.load("/assets/InfiniteForest/water.jpg",e=>{e.wrapS=e.wrapT=o.RepeatWrapping}),sunDirection:z.position.clone().normalize(),sunColor:16777215,waterColor:7855,distortionScale:10,fog:void 0!==i.fog,time:1});l.receiveShadow=!0,l.rotation.x=-Math.PI/2,l.position.x=300*e,l.position.z=300*s,l.position.y=0,i.add(l);let h=new v({worker:t,bladeCount:24e3,bladeWidth:1.5,bladeHeight:2.5,noiseScale:.015,noiseAmplitude:10,scene:i,grassTexture:B,chunkX:e,chunkZ:s,gridSize:300});return{mesh:a,waterMesh:l,trees:new x({noiseScale:.015,noiseAmplitude:10,noiseFunction:G,scene:i,chunkX:e,chunkZ:s,gridSize:300}),grass:h,x:e,z:s}},V=()=>{let e=Math.floor(r.position.x/300),t=Math.floor(r.position.z/300);for(let s=t;s>t-3-1;s--){let t=U(e,s);if(!D.has(t)){let i=N(e,s);D.set(t,i)}}D.forEach((s,r)=>{(s.x<e-3||s.x>e+3||s.z<t-6||s.z>t+3)&&(i.remove(s.mesh),s.mesh.geometry.dispose(),s.waterMesh&&(i.remove(s.waterMesh),s.waterMesh.geometry.dispose()),s.grass.dispose(),s.trees.dispose(),D.delete(r))})};(async()=>{await x.loadTrees(),V();let e=new o.Vector3(0,200,100),t=new o.Clock;r.position.z=-10;let s=()=>{requestAnimationFrame(s);let i=t.getDelta();t.getElapsedTime(),D.forEach(e=>{e.waterMesh.material.uniforms.time.value+=.03}),A.position.z-=80*i,r.position.z-=80*i,z.target.position.set(r.position.x,0,r.position.z),z.position.copy(z.target.position).add(e),V(),w.render()};s()})();let X=()=>{let e=window.innerWidth,t=window.innerHeight;r.aspect=e/t,r.updateProjectionMatrix(),a.setSize(e,t)};return window.addEventListener("resize",X),()=>{window.removeEventListener("resize",X),a.dispose(),D.forEach(e=>{i.remove(e.mesh),e.mesh.geometry.dispose(),e.mesh.material.dispose(),e.waterMesh&&(i.remove(e.waterMesh),e.waterMesh.geometry.dispose(),e.waterMesh.material.dispose()),i.remove(e.grass.mesh),e.grass.dispose()}),D.clear(),i.traverse(e=>{if(e.geometry&&e.geometry.dispose(),e.material){let t=e.material;Array.isArray(t)?t.forEach(e=>e.dispose()):t.dispose()}})}},[]),(0,i.jsx)("canvas",{ref:e,style:{width:"100%",height:"100%",display:"block"}})}},4738:function(){},20123:function(){}},function(e){e.O(0,[8685,5889,225,6762,7122,3590,2025,813,154,536,4233,9154,944,6233,2971,2117,1744],function(){return e(e.s=22327)}),_N_E=e.O()}]);