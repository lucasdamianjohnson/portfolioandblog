(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[634],{22327:function(e,t,s){Promise.resolve().then(s.bind(s,81523)),Promise.resolve().then(s.bind(s,70049)),Promise.resolve().then(s.bind(s,16602)),Promise.resolve().then(s.t.bind(s,4738,23)),Promise.resolve().then(s.t.bind(s,20123,23))},16602:function(e,t,s){"use strict";s.r(t),s.d(t,{default:function(){return v}});var i=s(57437),o=s(2265),r=s(79290),n=s(14350),a=s(55754),d=s(65197),l=s(99216),h=s(80130),m=s(7610),c=s(94093),w=s(84270);class g{setSeed(e){this.z=this.seed=(null==e?Math.random()*this.m:e)>>>0}getSeed(){return this.seed}rand(){return this.z=(this.a*this.z+this.c)%this.m,this.z/this.m}constructor(e){this.seed=e,this.m=4294967296,this.a=1664525,this.c=1013904223,this.z=0,this.setSeed(e)}}var p=s(44109);class u{dispose(){this.mesh&&(this.scene.remove(this.mesh),this.mesh.geometry.dispose(),this.grassMaterial.dispose())}constructor({worker:e,bladeCount:t,bladeWidth:s,bladeHeight:i,grassTexture:o,noiseScale:n,noiseAmplitude:a,chunkX:d,chunkZ:l,gridSize:h,scene:m}){this.mesh=null,this.bladeCount=t,this.scene=m,this.bladeWidth=s,this.bladeHeight=i,this.grassMaterial=new r.Wid({map:o,side:r.ehD});let c=crypto.randomUUID(),w=t=>{let{data:s}=t;if("set-grass"==s[0]&&s[1]==c){e.removeEventListener("message",w);let{positions:t,uvs:i,colors:o,indices:n}=s[2],a=new r.u9r;a.setAttribute("position",new r.TlE(t,3)),a.setAttribute("uv",new r.TlE(i,2)),a.setAttribute("color",new r.TlE(o,3)),a.setIndex(new r.TlE(n,1)),a.computeVertexNormals(),this.mesh=new r.Kj0(a,this.grassMaterial),this.mesh.castShadow=!0,this.mesh.receiveShadow=!0,this.scene.add(this.mesh)}};e.addEventListener("message",w),e.postMessage(["make-grass",c,d,l,h,n,a,s,i])}}class f{static async loadTrees(){let e=new c.E,t=f.treePaths.map(t=>e.loadAsync(t).then(e=>{e.scene.traverse(e=>{e.material&&(e.material.side=r.Wl3)});let t=e.scene.children[0];f.loadedTrees.push(t)}));await Promise.all(t)}placeTrees(e,t,s){let i=this.gridSize/2,o=0;for(let i of f.loadedTrees){if(o>40)break;let n=new r.SPe(i.geometry,i.material,10);n.castShadow=!0,n.receiveShadow=!0;let a=0,d=2*Math.random()+.5;for(let i=this.chunkZ*this.gridSize;i<this.chunkZ*this.gridSize+this.gridSize;i+=d){if(Math.random()>.8)continue;o++;let d=3*Math.random();n.setMatrixAt(a,new r.yGw().makeTranslation(this.chunkX*this.gridSize-this.gridSize+d+10,e(this.chunkX*this.gridSize*t,i*t,0)*s-1,i)),a++,n.setMatrixAt(a,new r.yGw().makeTranslation(this.chunkX*this.gridSize+this.gridSize-d-10,e((this.chunkX*this.gridSize+this.gridSize)*t,i*t,0)*s-1,i)),a++}this.scene.add(n),this.trees.push(n)}for(let o of f.loadedTrees){let n=new r.SPe(o.geometry,o.material,10);n.castShadow=!0,n.receiveShadow=!0;for(let o=0;o<10;o++){let a=this.chunkX*this.gridSize+Math.random()*this.gridSize-i,d=this.chunkZ*this.gridSize+Math.random()*this.gridSize-i,l=e(a*t,d*t,0)*s;if(l<3)continue;let h=new r.yGw().makeTranslation(a,l-1,d);n.setMatrixAt(o,h)}this.scene.add(n),this.trees.push(n)}}dispose(){for(let e of this.trees)this.scene.remove(e),e.dispose();this.trees=[]}constructor({noiseScale:e,noiseAmplitude:t,noiseFunction:s,chunkX:i,chunkZ:o,gridSize:r,scene:n}){this.trees=[],this.scene=n,this.chunkX=i,this.chunkZ=o,this.gridSize=r,f.loadedTrees.length>0&&this.placeTrees(s,e,t)}}f.treePaths=["/assets/InfiniteForest/trees/1.gltf","/assets/InfiniteForest/trees/2.gltf","/assets/InfiniteForest/trees/3.gltf","/assets/InfiniteForest/trees/4.gltf","/assets/InfiniteForest/trees/5.gltf"],f.loadedTrees=[];var v=()=>{let e=(0,o.useRef)(null);return(0,o.useEffect)(()=>{let t=new Worker(s.tu(new URL(s.p+s.u(1693),s.b))),i=new r.xsS,o=new r.cPb(30,window.innerWidth/window.innerHeight,.01,1e3);o.position.set(0,11,-300),o.rotation.x=-.02;let c=new r.CP7({canvas:e.current,antialias:!0});c.setSize(window.innerWidth,window.innerHeight),c.setPixelRatio(Math.max(1,window.devicePixelRatio/2)),c.setClearColor(0,1),c.shadowMap.enabled=!0,c.shadowMap.autoUpdate=!0,c.shadowMap.type=r.ntZ;let v=new w.m(o,c.domElement);v.movementSpeed=200,v.rollSpeed=Math.PI/24,v.dragToLook=!0;let S=new n.x(c);S.addPass(new a.C(i,o));let x=new d.m(new r.FM8(window.innerWidth,window.innerHeight),1.25,.4,.98);S.addPass(x);let z=new l.t(0,.025,648,!1);S.addPass(z);let b=new p.A(i,o,{focus:100,aperture:25e-6,maxblur:.1});S.addPass(b);let M=new r.Mig(16777215,.4);i.add(M);let y=new r.Ox3(16777215,4);i.add(y.target),y.castShadow=!0,y.shadow.bias=.01,y.shadow.bias=-.0001,y.shadow.normalBias=.05,y.shadow.mapSize.width=4096,y.shadow.mapSize.height=4096,y.shadow.camera.near=.5,y.shadow.camera.far=500;let C=o.aspect;y.shadow.camera.left=-500*C,y.shadow.camera.right=500*C,y.shadow.camera.top=500,y.shadow.camera.bottom=-500,y.shadow.camera.updateProjectionMatrix(),i.add(y);let P=new r.Rki(y.shadow.camera);i.add(P);let k=new r.cBK().load(["/assets/InfiniteForest/px.jpg","/assets/InfiniteForest/nx.jpg","/assets/InfiniteForest/py.jpg","/assets/InfiniteForest/ny.jpg","/assets/InfiniteForest/pz.jpg","/assets/InfiniteForest/nz.jpg"]);i.background=k;let T={uniforms:{topColor:{value:new r.Ilk(8900331)},bottomColor:{value:new r.Ilk(16777215)},heightCutoff:{value:200}},vertexShader:"\n        varying vec3 vWorldPosition;\n        void main() {\n          vec4 worldPosition = modelMatrix * vec4(position, 1.0);\n          vWorldPosition = worldPosition.xyz;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        }\n      ",fragmentShader:"\n        uniform vec3 topColor;\n        uniform vec3 bottomColor;\n        uniform float heightCutoff;\n        varying vec3 vWorldPosition;\n    \n        void main() {\n          float heightFactor = smoothstep(0.0, heightCutoff, vWorldPosition.y);\n          gl_FragColor = vec4(mix(bottomColor, topColor, heightFactor), 1.0);\n        }\n      ",side:r._Li},I=new r.jyz(T),E=new r.DvJ(800,5e3,800),F=new r.Kj0(E,I);F.position.z=-600,i.add(F);let H=new r.dpR,_=H.load("/assets/InfiniteForest/dirt.png"),W=H.load("/assets/InfiniteForest/grass.png"),j=H.load("/assets/InfiniteForest/grass.png");_.wrapS=_.wrapT=r.rpg,W.wrapS=W.wrapT=r.rpg,c.toneMapping=r.LY2;let A=new r.Wid({map:_});A.onBeforeCompile=e=>{e.uniforms.grassTexture={value:W},e.uniforms.lowerHeight={value:0},e.uniforms.upperHeight={value:5},e.vertexShader=e.vertexShader.replace("#include <common>","#include <common>\n          varying float vHeight;\n          varying vec2 vUv;\n        "),e.vertexShader=e.vertexShader.replace("#include <begin_vertex>","#include <begin_vertex>\n          vUv = uv;\n          vHeight = position.z;\n        "),e.fragmentShader=e.fragmentShader.replace("#include <common>","#include <common>\n          uniform sampler2D grassTexture;\n          uniform float lowerHeight;\n          uniform float upperHeight;\n          varying float vHeight;\n          varying vec2 vUv;\n        "),e.fragmentShader=e.fragmentShader.replace("#include <map_fragment>","\n          // Normalize the height for blending\n          float t = smoothstep(lowerHeight, upperHeight, vHeight);\n          \n          // Sample both textures\n          vec4 dirtColor = texture2D(map, vUv * 10.0); // Dirt texture\n          vec4 grassColor = texture2D(grassTexture, vUv * 10.0); // Grass texture\n          \n    // Convert sampled colors to linear space\ndirtColor.rgb = pow(dirtColor.rgb, vec3(2.2)); // sRGB to linear for dirt texture\ngrassColor.rgb = pow(grassColor.rgb, vec3(2.2)); // sRGB to linear for grass texture\n\n// Blend textures based on height\nvec4 finalColor = mix(dirtColor, grassColor, t);\n\n// Convert final color back to sRGB before setting it\nfinalColor.rgb = pow(finalColor.rgb, vec3(1.0 / 2.2));\n\n// Set the final color\ndiffuseColor = finalColor;\n        ")};let R=new r.Ilk(16777215);i.fog=new r.ybr(R,.00105);let U=Math.random()*Number.MAX_SAFE_INTEGER>>0,D=new g(U),N=(0,m.zz)(()=>D.rand());t.postMessage(["set-seed",U]);let B=(e,t)=>"".concat(e,"_").concat(t),G=new Map,L=(e,s)=>{let o=new r._12(300,300,50,50),n=new r.Kj0(o,A);n.receiveShadow=!0,n.castShadow=!1;let a=n.geometry.attributes.position;for(let t=0;t<a.count;t++){let i=10*N((a.getX(t)+300*e)*.015,(0-a.getY(t)+300*s)*.015,0);a.setZ(t,i)}n.rotation.x=-Math.PI/2,n.position.x=300*e,n.position.z=300*s,a.needsUpdate=!0,n.geometry.computeVertexNormals(),i.add(n);let d=new r._12(300,300),l=new h.B(d,{textureWidth:window.innerWidth*window.devicePixelRatio,textureHeight:window.innerHeight*window.devicePixelRatio,waterNormals:H.load("/assets/InfiniteForest/water.jpg",e=>{e.wrapS=e.wrapT=r.rpg}),sunDirection:y.position.clone().normalize(),sunColor:16777215,waterColor:7855,distortionScale:10,fog:void 0!==i.fog,time:1});l.receiveShadow=!0,l.rotation.x=-Math.PI/2,l.position.x=300*e,l.position.z=300*s,l.position.y=0,i.add(l);let m=new u({worker:t,bladeCount:24e3,bladeWidth:.4,bladeHeight:1.6,noiseScale:.015,noiseAmplitude:10,scene:i,grassTexture:j,chunkX:e,chunkZ:s,gridSize:300});return{mesh:n,waterMesh:l,trees:new f({noiseScale:.015,noiseAmplitude:10,noiseFunction:N,scene:i,chunkX:e,chunkZ:s,gridSize:300}),grass:m,x:e,z:s}},X=()=>{let e=Math.floor(o.position.x/300),t=Math.floor(o.position.z/300);for(let s=t;s>t-3-1;s--){let t=B(e,s);if(!G.has(t)){let i=L(e,s);G.set(t,i)}}G.forEach((s,o)=>{(s.x<e-3||s.x>e+3||s.z<t-6||s.z>t+3)&&(i.remove(s.mesh),s.mesh.geometry.dispose(),s.mesh.material.dispose(),s.waterMesh&&(i.remove(s.waterMesh),s.waterMesh.geometry.dispose(),s.waterMesh.material.dispose()),i.remove(s.grass.mesh),s.grass.dispose(),s.trees.dispose(),G.delete(o))})};(async()=>{await f.loadTrees(),X();let e=new r.Pa4(0,200,100),t=new r.SUY;o.position.z=-10;let s=()=>{requestAnimationFrame(s);let i=t.getDelta();t.getElapsedTime(),G.forEach(e=>{e.waterMesh.material.uniforms.time.value+=.03}),F.position.z-=80*i,o.position.z-=80*i,y.target.position.set(o.position.x,0,o.position.z),y.position.copy(y.target.position).add(e),X(),S.render()};s()})();let Z=()=>{let e=window.innerWidth,t=window.innerHeight;o.aspect=e/t,o.updateProjectionMatrix(),c.setSize(e,t)};return window.addEventListener("resize",Z),()=>{window.removeEventListener("resize",Z),c.dispose(),G.forEach(e=>{i.remove(e.mesh),e.mesh.geometry.dispose(),e.mesh.material.dispose(),e.waterMesh&&(i.remove(e.waterMesh),e.waterMesh.geometry.dispose(),e.waterMesh.material.dispose()),i.remove(e.grass.mesh),e.grass.dispose()}),G.clear(),i.traverse(e=>{if(e.geometry&&e.geometry.dispose(),e.material){let t=e.material;Array.isArray(t)?t.forEach(e=>e.dispose()):t.dispose()}})}},[]),(0,i.jsx)("canvas",{ref:e,style:{width:"100%",height:"100%",display:"block"}})}},4738:function(){},20123:function(){}},function(e){e.O(0,[8685,5889,225,8652,7707,2971,2117,1744],function(){return e(e.s=22327)}),_N_E=e.O()}]);